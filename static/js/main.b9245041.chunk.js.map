{"version":3,"sources":["lib/rollDice.ts","lib/storySucceeds.ts","lib/byProp.ts","state/gameActions/helpers.ts","state/gameActions/gameActions.ts","state/gameActions/findGameActionById.ts","state/gremlins.ts","state/round.ts","state/gameActions/getEffect.ts","state/gameActions/getCost.ts","state/effects/types.ts","state/effects/effects.ts","state/effects/helpers.ts","state/roundDescriptions/roundDescriptions.tsx","state/game.ts","state/roundDescriptions/getRoundDescriptionEffects.ts","state/useAppState.ts","state/gameActions/getAvailableGameActions.ts","App.tsx","constants.ts","index.tsx"],"names":["rollDice","Math","floor","random","storySucceeds","sumByProp","objects","key","sum","forEach","obj","concatByProp","all","push","fromRound","roundNumber","currentRound","unique","_","finished","selected","id","includes","combine","checks","i","length","check","hasNoEffect","gameActionList","PROTECTED_FROM_OUTSIDE_DISTRACTION","name","available","description","cost","effect","WORKING_AGREEMENTS","capacity","title","ELIMINATE_LONG_LIVED_FEATURE_BRANCHES","type","GAME_ACTION_BUILD_SERVER","GAME_ACTION_TEAMS_ON_SAME_FLOOR","age","GAME_ACTION_UNIT_TESTING","GAME_ACTION_INFORMAL_CROSS_TRAINING","GAME_ACTION_FORMAL_CROSS_TRAINING","gameActions","Object","entries","map","action","findGameActionById","gameActionId","find","gameAction","isGremlinId","thing","gremlinList","4","finishedActionIds","rollGremlin","getEffects","round","pastGremlinRolls","selectedGameActionIds","getActionEffect","concat","gremlinRoll","gremlinId","getGremlinEffect","getCosts","EFFECT_HIDDEN","Symbol","gameEffectList","rounds","roundsWithoutEngAction","isEffect","e","isVisibleEffect","roundDescriptions","1","3","INITIAL_STATE","pastRounds","getRoundEffects","roundAmounts","roundDescriptionEffects","desc","previousRounds","slice","getRoundDescriptionEffects","filter","allActionIds","actionEffects","reduce","allEffects","previousGremlinRolls","roundEffects","gameEffects","gameEffect","getCapacity","effects","gameReducer","state","payload","storiesAttempted","storiesCompleted","Array","fill","useAppState","useReducer","dispatch","roundCapacity","visibleEffects","capacityAvailable","currentRoundNumber","availableGameActions","number","total","activeEffects","result","App","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9245041.chunk.js","sourcesContent":["export function rollDice() {\n  return 1 + Math.floor(Math.random() * 6);\n}\n","import { rollDice } from './rollDice';\n\nexport function storySucceeds() {\n  return rollDice() >= 3;\n}\n","type NonUndefined<A> = A extends undefined ? never : A;\ntype NumberKeys<T extends object> = {\n  [K in keyof T]-?: NonUndefined<T[K]> extends number ? K : never;\n}[keyof T];\ntype ArrayKeys<T extends object> = {\n  [K in keyof T]-?: NonUndefined<T[K]> extends any[] ? K : never;\n}[keyof T];\n\nexport function sumByProp<T extends object>(\n  objects: T[],\n  key: NumberKeys<T>,\n): number {\n  let sum = 0;\n  objects.forEach((obj) => {\n    sum += (obj as any)[key];\n  });\n  return sum;\n}\n\nexport function concatByProp<T extends object, K extends ArrayKeys<T>>(\n  objects: T[],\n  key: K,\n): T[K] {\n  const all: any = [];\n  objects.forEach((obj) => {\n    all.push(...obj[key]);\n  });\n  return all;\n}\n","import { AvailabilityCheck } from './types';\nimport { GameActionId } from './gameActions';\n\n/** --- AVAILABILITY --- */\nexport function fromRound(roundNumber: number): AvailabilityCheck {\n  return (currentRound) => currentRound >= roundNumber;\n}\nexport function unique(): AvailabilityCheck {\n  return (_, finished, selected, id) =>\n    ![...finished, ...selected].includes(id);\n}\nexport function oncePerRound(): AvailabilityCheck {\n  return (_, __, selected, id) => !selected.includes(id);\n}\nexport function requires(id: GameActionId): AvailabilityCheck {\n  return (_, finished) => finished.includes(id);\n}\nexport function combine(checks: AvailabilityCheck[]): AvailabilityCheck {\n  return (...args) => {\n    for (let i = 0; i < checks.length; i++) {\n      const check = checks[i];\n      if (!check(...args)) {\n        return false;\n      }\n    }\n    return true;\n  };\n}\n\n/** --- EFFECTS --- */\nexport function hasNoEffect() {\n  return null;\n}\n","import { GameActionList, GameAction } from './types';\nimport { unique, hasNoEffect, combine, fromRound, requires } from './helpers';\n\nexport type GameActionId =\n  | 'GAME_ACTION_BUILD_SERVER'\n  | 'GAME_ACTION_TEAMS_ON_SAME_FLOOR'\n  | 'GAME_ACTION_UNIT_TESTING'\n  | 'GAME_ACTION_INFORMAL_CROSS_TRAINING'\n  | 'GAME_ACTION_FORMAL_CROSS_TRAINING'\n  | 'PROTECTED_FROM_OUTSIDE_DISTRACTION'\n  | 'WORKING_AGREEMENTS'\n  | 'ELIMINATE_LONG_LIVED_FEATURE_BRANCHES';\n\nexport const gameActionList: GameActionList = {\n  PROTECTED_FROM_OUTSIDE_DISTRACTION: {\n    name: 'Protected from Outside Distraction',\n    available: unique(),\n    description: 'ScrumMaster protects the team from outside distraction',\n    cost: 1,\n    // TODO - the effect is different in that it effects the success die roll\n    effect: hasNoEffect,\n  },\n  WORKING_AGREEMENTS: {\n    name: 'Working Agreements',\n    available: unique(),\n    description: 'Create Team Working Agreements',\n    cost: 1,\n    // TODO - the effect is different in that it effects the success die roll\n    effect: () => ({ capacity: 1, title: 'TODO: Working Agreements active' }),\n  },\n  ELIMINATE_LONG_LIVED_FEATURE_BRANCHES: {\n    type: 'ENGINEERING',\n    name: 'All Work is done on Main or Trunk',\n    available: unique(),\n    description:\n      'When teams use Feature Branches – then they’re not really using Continuous integration. Feature branching optimizes for the individual while harming the Team',\n    cost: 2,\n    effect: () => ({\n      capacity: 1,\n      title: 'TODO: All Work is done on Main or Trunk active',\n    }),\n  },\n  GAME_ACTION_BUILD_SERVER: {\n    type: 'ENGINEERING',\n    name: 'Build Server',\n    available: unique(),\n    description:\n      'Setup Build Server and Continuous Integration. This is required to make future engineering improvements',\n    cost: 2,\n    effect: hasNoEffect,\n  },\n  GAME_ACTION_TEAMS_ON_SAME_FLOOR: {\n    name: 'Team Members On SameFloor',\n    available: unique(),\n    description:\n      \"Getting Team Members on the same floor reduces the cost of communication as they don't have to go far to ask questions\",\n    cost: 3,\n    effect: (age) => {\n      if (age < 5) {\n        return {\n          capacity: age + 1,\n          title: `TODO: Team on same floor since ${age + 1} rounds`,\n        };\n      }\n\n      return {\n        capacity: 5,\n        title: `TODO: Team on same floor since 5 or more rounds`,\n      };\n    },\n  },\n  GAME_ACTION_UNIT_TESTING: {\n    type: 'ENGINEERING',\n    name: 'Unit Testing',\n    available: combine([\n      unique(),\n      fromRound(2),\n      requires('GAME_ACTION_BUILD_SERVER'),\n    ]),\n    description: 'TODO: SOME DESCRIPTION',\n    cost: 2,\n    effect: () => ({ capacity: 2, title: 'TODO: Unit Testing active' }),\n  },\n  GAME_ACTION_INFORMAL_CROSS_TRAINING: {\n    name: 'Informal Cross Training',\n    available: combine([unique(), fromRound(3)]),\n    description:\n      'Informal cross-training for existing team members in an area the team is weak. (Testing anyone?)',\n    cost: 1,\n    effect: () => ({\n      capacity: 1,\n      title: 'TODO: Informal Cross Training active',\n    }),\n  },\n  GAME_ACTION_FORMAL_CROSS_TRAINING: {\n    name: 'Formal Cross-Training',\n    available: combine([unique(), fromRound(3)]),\n    description:\n      'Formal cross-training for existing team members in an area the team is weak. (Testing anyone?)',\n    cost: 3,\n    effect: () => ({\n      capacity: 3,\n      title: 'TODO: Informal Cross Training active',\n    }),\n  },\n};\n\nexport const gameActions: GameAction[] = Object.entries(\n  gameActionList,\n).map(([id, action]) => ({ ...action, id: id as GameActionId }));\n","import { GameAction } from './types';\nimport { GameActionId, gameActions } from './gameActions';\n\nexport function findGameActionById(gameActionId: GameActionId): GameAction {\n  return gameActions.find((gameAction) => gameActionId === gameAction.id)!;\n}\n","import { rollDice } from 'lib/rollDice';\nimport { Effect } from './effects';\nimport { GameActionId } from './gameActions';\n\nexport type GremlinId = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\ntype GremlinImplementation = {\n  effect: (age: number, finishedActionIds: GameActionId[]) => null | Effect;\n};\ntype GremlinList = { [k in GremlinId]?: GremlinImplementation };\n\nexport function isGremlinId(thing: unknown): thing is GremlinId {\n  return typeof thing === 'number' && thing >= 1 && thing <= 12;\n}\n\nexport const gremlinList: GremlinList = {\n  4: {\n    effect(age, finishedActionIds) {\n      if (\n        age >= 3 ||\n        (finishedActionIds.includes('PROTECTED_FROM_OUTSIDE_DISTRACTION') &&\n          age >= 2)\n      ) {\n        return null;\n      }\n\n      let capacity = -3;\n\n      if (finishedActionIds.includes('GAME_ACTION_INFORMAL_CROSS_TRAINING')) {\n        capacity += 1;\n      }\n      if (finishedActionIds.includes('GAME_ACTION_FORMAL_CROSS_TRAINING')) {\n        capacity += 1;\n      }\n\n      return {\n        capacity,\n        title:\n          'We’ve had an emergency on another team, we need your best tester for a while.',\n      };\n    },\n  },\n};\n\nexport function getGremlinEffect(\n  gremlinId: GremlinId,\n  age: number,\n  finishedActionIds: GameActionId[],\n) {\n  return gremlinList[gremlinId]?.effect(age, finishedActionIds) || null;\n}\n\nexport function rollGremlin(currentRound: number): GremlinId | undefined {\n  if (currentRound < 2) {\n    return undefined;\n  }\n  return (rollDice() + rollDice()) as GremlinId;\n}\n","import { storySucceeds, sumByProp } from '../lib';\nimport {\n  findGameActionById,\n  GameActionId,\n  getCost as getActionCost,\n  getEffect as getActionEffect,\n} from './gameActions';\nimport { getGremlinEffect, GremlinId } from './gremlins';\n\nexport type Round = {\n  selectedGameActionIds: GameActionId[];\n};\nexport type ClosedRound = Round & {\n  storiesCompleted: number;\n  gremlinRoll?: GremlinId;\n};\n\nexport function createRound(): Round {\n  return {\n    selectedGameActionIds: [],\n  };\n}\n\nexport function getEffects(\n  round: ClosedRound,\n  age: number,\n  finishedActionIds: GameActionId[],\n  pastGremlinRolls: GremlinId[],\n) {\n  return round.selectedGameActionIds\n    .map((id) => getActionEffect(id, age, finishedActionIds))\n    .concat(\n      round.gremlinRoll && !pastGremlinRolls.includes(round.gremlinRoll)\n        ? getGremlinEffect(round.gremlinRoll, age, finishedActionIds)\n        : [],\n    );\n}\n\nexport function getCosts(round: Round) {\n  return sumByProp(\n    round.selectedGameActionIds.map((id) => ({\n      cost: getActionCost(findGameActionById(id)),\n    })),\n    'cost',\n  );\n}\n\nexport function closeRound(\n  round: Round,\n  storiesAttempted: number,\n  gremlinRoll?: GremlinId,\n): ClosedRound {\n  return {\n    ...round,\n    gremlinRoll,\n    storiesCompleted:\n      storiesAttempted <= 0\n        ? 0\n        : Array(storiesAttempted).fill('').filter(storySucceeds).length,\n  };\n}\n","import { GameActionId } from './gameActions';\nimport { findGameActionById } from './findGameActionById';\n\nexport function getEffect(\n  gameActionId: GameActionId,\n  age: number,\n  finishedActionIds: GameActionId[],\n) {\n  return findGameActionById(gameActionId).effect(age, finishedActionIds);\n}\n","import { GameAction } from './types';\n\nexport function getCost(gameAction: GameAction): number {\n  return gameAction.cost;\n}\n","import { Round } from '../round';\nexport const EFFECT_HIDDEN = Symbol('EFFECT_HIDDEN');\n\nexport type VisibleEffect = {\n  capacity: number;\n  title: string;\n  description?: string;\n};\nexport type Effect =\n  | VisibleEffect\n  | {\n      capacity: number;\n      title: typeof EFFECT_HIDDEN;\n    };\n\nexport type GameEffect = (rounds: Round[]) => Effect | null;\n","import { findGameActionById } from '../gameActions';\nimport { GameEffect } from './types';\n\nexport const gameEffectList: GameEffect[] = [\n  function technicalDebtDrag(rounds) {\n    let roundsWithoutEngAction = 0;\n\n    for (const round of rounds) {\n      const roundsGameActions = round.selectedGameActionIds.map(\n        findGameActionById,\n      );\n      const engineeringAction = roundsGameActions.find(\n        ({ type }) => type === 'ENGINEERING',\n      );\n\n      if (engineeringAction) {\n        break;\n      }\n\n      roundsWithoutEngAction += 1;\n    }\n\n    if (roundsWithoutEngAction === 0) {\n      return null;\n    }\n\n    return {\n      capacity: -roundsWithoutEngAction,\n      title: 'TODO: TechnicalDebt Drag Effect Title',\n      description: `No Engineering improvement for ${roundsWithoutEngAction} round${\n        roundsWithoutEngAction > 1 ? 's' : ''\n      }`,\n    };\n  },\n];\n","import { Effect, EFFECT_HIDDEN, VisibleEffect } from './types';\n\nexport function isEffect(e: Effect | null): e is Effect {\n  return e !== null;\n}\n\nexport function isVisibleEffect(e: Effect): e is VisibleEffect {\n  return e.title !== EFFECT_HIDDEN;\n}\n","import React, { ReactElement } from 'react';\nimport { Effect, EFFECT_HIDDEN } from '../effects';\nimport { ClosedRound } from '../round';\n\nexport type RoundDescription = {\n  description: ReactElement;\n  effect?: (previousRounds: ClosedRound[]) => Effect | null;\n};\n\n/* Rounds are 1-indexed - 1 is the first round */\nexport const roundDescriptions: { [key: string]: RoundDescription } = {\n  1: {\n    description: (\n      <>\n        <h2>Team, welcome to the World’s Smallest Online Bookstore</h2>\n        <p>\n          We hired you because you’re the best individuals in your respective\n          areas. Please remember that we’re Vulture Capital funded and we have\n          only a few months runway, so you must deliver. This first Sprint, the\n          company really needs you to prove that you can deliver a working …\n        </p>\n      </>\n    ),\n    effect: () => ({ capacity: 10, title: EFFECT_HIDDEN }),\n  },\n  3: {\n    description: (\n      <>\n        <h2>\n          We must go live with an early version of the product this round, for\n          CES\n        </h2>\n        <p>\n          Due to your limited productivity in past rounds, management are\n          prepared to offer some options to help you out. We will pay an extra\n          ‘4’ points for anything that helps. Another team member? Overtime?\n        </p>\n      </>\n    ),\n    effect: () => ({\n      capacity: 4,\n      title: 'Management is paying overtime',\n    }),\n  },\n};\n","import {\n  Round,\n  ClosedRound,\n  createRound,\n  closeRound,\n  getEffects,\n  getCosts,\n} from './round';\nimport { Effect, gameEffectList, isEffect } from './effects';\nimport { concatByProp } from '../lib';\nimport { getRoundDescriptionEffects } from './roundDescriptions';\nimport { GameActionId } from './gameActions';\nimport { GremlinId, isGremlinId } from './gremlins';\n\nexport type GameState = {\n  currentRound: Round;\n  pastRounds: ClosedRound[];\n};\nexport type SelectGameActionAction = {\n  type: 'SELECT_GAME_ACTION';\n  payload: GameActionId;\n};\nexport type NextRoundAction = {\n  type: 'NEXT_ROUND';\n  payload?: { gremlinRoll?: GremlinId };\n};\nexport type Action = NextRoundAction | SelectGameActionAction;\n\nexport const INITIAL_STATE: GameState = {\n  currentRound: {\n    selectedGameActionIds: [],\n  },\n  pastRounds: [],\n};\n\nexport function getRoundEffects(pastRounds: ClosedRound[]) {\n  const roundAmounts = pastRounds.length;\n  const roundDescriptionEffects = getRoundDescriptionEffects(pastRounds);\n  if (!pastRounds.length) {\n    return roundDescriptionEffects.filter(isEffect);\n  }\n\n  const allActionIds = concatByProp(pastRounds, 'selectedGameActionIds');\n\n  const actionEffects = pastRounds.reduce((allEffects, round, i) => {\n    const age = roundAmounts - (i + 1);\n    const previousGremlinRolls = pastRounds\n      .slice(0, i)\n      .map((round) => round.gremlinRoll)\n      .filter(isGremlinId);\n    const roundEffects = getEffects(\n      round,\n      age,\n      allActionIds,\n      previousGremlinRolls,\n    );\n\n    return allEffects.concat(roundEffects);\n  }, [] as (Effect | null)[]);\n\n  const gameEffects = gameEffectList.map((gameEffect) => {\n    return gameEffect(pastRounds);\n  });\n\n  return roundDescriptionEffects\n    .concat(actionEffects)\n    .concat(gameEffects)\n    .filter(isEffect);\n}\n\nexport function getCapacity(effects: Effect[]) {\n  return effects.reduce((capacity, effect) => {\n    return capacity + effect.capacity;\n  }, 0);\n}\n\nexport function gameReducer(state: GameState, action: Action): GameState {\n  switch (action.type) {\n    case 'SELECT_GAME_ACTION': {\n      return {\n        ...state,\n        currentRound: {\n          ...state.currentRound,\n          selectedGameActionIds: [\n            ...state.currentRound.selectedGameActionIds,\n            action.payload,\n          ],\n        },\n      };\n    }\n    case 'NEXT_ROUND': {\n      return {\n        ...state,\n        pastRounds: [\n          ...state.pastRounds,\n          closeRound(\n            state.currentRound,\n            getCapacity(getRoundEffects(state.pastRounds)) -\n              getCosts(state.currentRound),\n            action.payload?.gremlinRoll,\n          ),\n        ],\n        currentRound: createRound(),\n      };\n    }\n  }\n}\n","import { Effect } from '../effects';\nimport { ClosedRound } from '../round';\nimport { roundDescriptions } from './roundDescriptions';\n\nexport function getRoundDescriptionEffects(pastRounds: ClosedRound[]) {\n  const currentRound = pastRounds.length;\n  const roundDescriptionEffects: (null | Effect)[] = [];\n\n  for (let i = 0; i <= currentRound; i++) {\n    const desc = roundDescriptions[i + 1];\n    if (!desc) {\n      continue;\n    }\n    const previousRounds = pastRounds.slice(0, i);\n    roundDescriptionEffects.push(desc.effect?.(previousRounds) || null);\n  }\n\n  return roundDescriptionEffects;\n}\n","import { Dispatch, ReactElement, useReducer } from 'react';\nimport { concatByProp, sumByProp } from '../lib';\nimport { isVisibleEffect, VisibleEffect } from './effects';\nimport {\n  Action,\n  gameReducer,\n  getRoundEffects,\n  getCapacity,\n  INITIAL_STATE,\n} from './game';\nimport { getAvailableGameActions, GameAction } from './gameActions';\nimport { getCosts } from './round';\nimport { roundDescriptions } from './roundDescriptions';\n\nexport type AppState = {\n  availableGameActions: GameAction[];\n  currentRound: {\n    number: number;\n    description?: ReactElement;\n    capacity: {\n      available: number;\n      total: number;\n    };\n    activeEffects: VisibleEffect[];\n  };\n  result: {\n    storiesCompleted: number;\n  };\n  pastRounds: {\n    number: number;\n  }[];\n};\n\nexport default function useAppState(): [AppState, Dispatch<Action>] {\n  const [state, dispatch] = useReducer(gameReducer, INITIAL_STATE);\n\n  const effects = getRoundEffects(state.pastRounds);\n  const roundCapacity = getCapacity(effects);\n  const visibleEffects = effects.filter(isVisibleEffect);\n  const costs = getCosts(state.currentRound);\n  const capacityAvailable = roundCapacity - costs;\n  const currentRoundNumber = state.pastRounds.length + 1;\n  const availableGameActions = getAvailableGameActions(\n    currentRoundNumber,\n    concatByProp(state.pastRounds, 'selectedGameActionIds'),\n    state.currentRound.selectedGameActionIds,\n  );\n  const currentRoundDescription =\n    roundDescriptions[currentRoundNumber]?.description;\n\n  return [\n    {\n      availableGameActions,\n      currentRound: {\n        description: currentRoundDescription,\n        number: currentRoundNumber,\n        capacity: {\n          available: capacityAvailable,\n          total: roundCapacity,\n        },\n        activeEffects: visibleEffects,\n      },\n      result: {\n        storiesCompleted: sumByProp(state.pastRounds, 'storiesCompleted'),\n      },\n      pastRounds: state.pastRounds.map((round, i) => ({\n        number: i + 1,\n      })),\n    },\n    dispatch,\n  ];\n}\n","import { GameAction } from './types';\nimport { GameActionId, gameActions } from './gameActions';\n\nexport function getAvailableGameActions(\n  currentRound: number,\n  finishedActionIds: GameActionId[],\n  selectedGameActionIds: GameActionId[],\n): GameAction[] {\n  return gameActions.filter((gameAction) =>\n    gameAction.available(\n      currentRound,\n      finishedActionIds,\n      selectedGameActionIds,\n      gameAction.id,\n    ),\n  );\n}\n","import React from 'react';\nimport { useAppState, rollGremlin } from './state';\nimport { TOTAL_ROUNDS } from './constants';\n\nexport default function App() {\n  const [state, dispatch] = useAppState();\n\n  return (\n    <>\n      <h1>High-Performance Team Game </h1>\n      {state.currentRound.number > TOTAL_ROUNDS ? (\n        <>\n          <h2>Results</h2>\n          <p>Completed {state.result.storiesCompleted} user stories</p>\n        </>\n      ) : (\n        <>\n          {state.pastRounds.length !== 0 && (\n            <>\n              <h2>Round: {state.pastRounds.slice(-1)[0].number} results</h2>\n              {/* <p>Action Cost: {pastRound.costs}</p>\n              <p>\n                Stories Completed: {pastRound.storiesCompleted}/\n                {pastRound.storiesAttempted}\n              </p> */}\n            </>\n          )}\n          <h2>Round {state.currentRound.number} of 6</h2>\n          {state.currentRound.description}\n          <p>\n            Capacity: {state.currentRound.capacity.available} /{' '}\n            {state.currentRound.capacity.total}\n          </p>\n          {state.currentRound.activeEffects.length !== 0 && (\n            <>\n              <h3>Active Effects</h3>\n              {state.currentRound.activeEffects.map((effect) => (\n                <>\n                  <h4>{effect.title}</h4>\n                  <p>Capacity: {effect.capacity}</p>\n                  {effect.description && <p>{effect.description}</p>}\n                </>\n              ))}\n            </>\n          )}\n          <button\n            onClick={() =>\n              dispatch({\n                type: 'NEXT_ROUND',\n                payload: {\n                  gremlinRoll: rollGremlin(state.currentRound.number),\n                },\n              })\n            }\n          >\n            Complete Round\n          </button>\n\n          <h2>Available Actions</h2>\n          {state.availableGameActions.map((gameAction) => (\n            <div key={gameAction.id}>\n              <h3>{gameAction.name}</h3>\n              <p>{gameAction.description}</p>\n              <p>Cost: {gameAction.cost}</p>\n              <button\n                onClick={() =>\n                  dispatch({\n                    type: 'SELECT_GAME_ACTION',\n                    payload: gameAction.id,\n                  })\n                }\n              >\n                Commit\n              </button>\n            </div>\n          ))}\n        </>\n      )}\n    </>\n  );\n}\n","export const TOTAL_ROUNDS = 6;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}