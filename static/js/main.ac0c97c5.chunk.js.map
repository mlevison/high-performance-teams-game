{"version":3,"sources":["__mocks__/cypress/expose.ts","lib/storySucceeds.ts","lib/rollDice.ts","lib/byProp.ts","state/gameActions/helpers.ts","state/gameActions/gameActions.ts","state/gameActions/derivers.ts","state/round.ts","state/effects.ts","state/game.ts","constants.ts","state/useAppState.ts","App.tsx","index.tsx"],"names":["global","expose","key","thing","__HPTG","implementation","Math","floor","random","storySucceeds","process","REACT_APP_ENV","require","default","newImplementation","sumByProp","objects","sum","forEach","obj","concatByProp","all","push","fromRound","roundNumber","currentRound","unique","_","finished","selected","id","includes","combine","checks","i","length","check","hasNoEffect","gameActionList","PROTECTED_FROM_OUTSIDE_DISTRACTION","name","available","description","cost","effect","WORKING_AGREEMENTS","capacity","title","ELIMINATE_LONG_LIVED_FEATURE_BRANCHES","type","GAME_ACTION_BUILD_SERVER","GAME_ACTION_TEAMS_ON_SAME_FLOOR","age","GAME_ACTION_UNIT_TESTING","GAME_ACTION_INFORMAL_CROSS_TRAINING","gameActions","Object","entries","map","action","findGameActionById","gameActionId","find","gameAction","getEffects","round","finishedActionIds","selectedGameActionIds","getEffect","getCosts","gameEffectList","rounds","roundsWithoutEngAction","INITIAL_STATE","pastRounds","getRoundEffects","roundAmounts","allActionIds","actionEffects","reduce","allEffects","roundEffects","concat","gameEffects","gameEffect","filter","gameEffectOrNull","getCapacity","effects","gameReducer","state","payload","storiesAttempted","storiesCompleted","Array","fill","useAppState","useReducer","dispatch","roundCapacity","capacityAvailable","availableGameActions","number","total","activeEffects","result","App","slice","onClick","btn","window","top","document","querySelector","click","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ac0c97c5.chunk.js","sourcesContent":["(global as any).__HPTG = {};\n\nexport default function expose<T extends any>(key: string, thing: T) {\n  (global as any).__HPTG[key] = thing;\n}\n","import { rollDice } from './rollDice';\n\nlet implementation = () => rollDice() >= 3;\n\nif (process.env.REACT_APP_ENV === 'test') {\n  require('../__mocks__/cypress/expose').default(\n    'setStorySucceeds',\n    (newImplementation: any) => {\n      implementation = newImplementation;\n    },\n  );\n}\n\nexport function storySucceeds() {\n  return implementation();\n}\n","export function rollDice() {\n  return 1 + Math.floor(Math.random() * 6);\n}\n","type NonUndefined<A> = A extends undefined ? never : A;\ntype NumberKeys<T extends object> = {\n  [K in keyof T]-?: NonUndefined<T[K]> extends number ? K : never;\n}[keyof T];\ntype ArrayKeys<T extends object> = {\n  [K in keyof T]-?: NonUndefined<T[K]> extends any[] ? K : never;\n}[keyof T];\n\nexport function sumByProp<T extends object>(\n  objects: T[],\n  key: NumberKeys<T>,\n): number {\n  let sum = 0;\n  objects.forEach((obj) => {\n    sum += (obj as any)[key];\n  });\n  return sum;\n}\n\nexport function concatByProp<T extends object, K extends ArrayKeys<T>>(\n  objects: T[],\n  key: K,\n): T[K] {\n  const all: any = [];\n  objects.forEach((obj) => {\n    all.push(...obj[key]);\n  });\n  return all;\n}\n","import { AvailabilityCheck } from './types';\nimport { GameActionId } from './gameActions';\n\n/** --- AVAILABILITY --- */\nexport function fromRound(roundNumber: number): AvailabilityCheck {\n  return (currentRound) => currentRound >= roundNumber;\n}\nexport function unique(): AvailabilityCheck {\n  return (_, finished, selected, id) =>\n    ![...finished, ...selected].includes(id);\n}\nexport function oncePerRound(): AvailabilityCheck {\n  return (_, __, selected, id) => !selected.includes(id);\n}\nexport function requires(id: GameActionId): AvailabilityCheck {\n  return (_, finished) => finished.includes(id);\n}\nexport function combine(checks: AvailabilityCheck[]): AvailabilityCheck {\n  return (...args) => {\n    for (let i = 0; i < checks.length; i++) {\n      const check = checks[i];\n      if (!check(...args)) {\n        return false;\n      }\n    }\n    return true;\n  };\n}\n\n/** --- EFFECTS --- */\nexport function hasNoEffect() {\n  return null;\n}\n","import { GameActionList } from './types';\nimport { unique, hasNoEffect, combine, fromRound, requires } from './helpers';\n\nexport type GameActionId =\n  | 'GAME_ACTION_BUILD_SERVER'\n  | 'GAME_ACTION_TEAMS_ON_SAME_FLOOR'\n  | 'GAME_ACTION_UNIT_TESTING'\n  | 'GAME_ACTION_INFORMAL_CROSS_TRAINING'\n  | 'PROTECTED_FROM_OUTSIDE_DISTRACTION'\n  | 'WORKING_AGREEMENTS'\n  | 'ELIMINATE_LONG_LIVED_FEATURE_BRANCHES';\n\nexport const gameActionList: GameActionList = {\n  PROTECTED_FROM_OUTSIDE_DISTRACTION: {\n    name: 'Protected from Outside Distraction',\n    available: unique(),\n    description: 'ScrumMaster protects the team from outside distraction',\n    cost: 1,\n    // TODO - the effect is different in that it effects the success die roll\n    effect: hasNoEffect,\n  },\n  WORKING_AGREEMENTS: {\n    name: 'Working Agreements',\n    available: unique(),\n    description: 'Create Team Working Agreements',\n    cost: 1,\n    // TODO - the effect is different in that it effects the success die roll\n    effect: () => ({ capacity: 1, title: 'TODO: Working Agreements active' }),\n  },\n  ELIMINATE_LONG_LIVED_FEATURE_BRANCHES: {\n    type: 'ENGINEERING',\n    name: 'All Work is done on Main or Trunk',\n    available: unique(),\n    description:\n      'When teams use Feature Branches – then they’re not really using Continuous integration. Feature branching optimizes for the individual while harming the Team',\n    cost: 2,\n    effect: () => ({\n      capacity: 1,\n      title: 'TODO: All Work is done on Main or Trunk active',\n    }),\n  },\n  GAME_ACTION_BUILD_SERVER: {\n    type: 'ENGINEERING',\n    name: 'Build Server',\n    available: unique(),\n    description:\n      'Setup Build Server and Continuous Integration. This is required to make future engineering improvements',\n    cost: 2,\n    effect: hasNoEffect,\n  },\n  GAME_ACTION_TEAMS_ON_SAME_FLOOR: {\n    name: 'Team Members On SameFloor',\n    available: unique(),\n    description:\n      \"Getting Team Members on the same floor reduces the cost of communication as they don't have to go far to ask questions\",\n    cost: 3,\n    effect: (age) => {\n      if (age < 5) {\n        return {\n          capacity: age + 1,\n          title: `TODO: Team on same floor since ${age + 1} rounds`,\n        };\n      }\n\n      return {\n        capacity: 5,\n        title: `TODO: Team on same floor since 5 or more rounds`,\n      };\n    },\n  },\n  GAME_ACTION_UNIT_TESTING: {\n    type: 'ENGINEERING',\n    name: 'Unit Testing',\n    available: combine([\n      unique(),\n      fromRound(2),\n      requires('GAME_ACTION_BUILD_SERVER'),\n    ]),\n    description: 'TODO: SOME DESCRIPTION',\n    cost: 2,\n    effect: () => ({ capacity: 2, title: 'TODO: Unit Testing active' }),\n  },\n  GAME_ACTION_INFORMAL_CROSS_TRAINING: {\n    name: 'Informal Cross Training',\n    available: combine([unique(), fromRound(3)]),\n    description:\n      'Informal cross-training for existing team members in an area the team is weak. (Testing anyone?)',\n    cost: 1,\n    effect: () => ({\n      capacity: 1,\n      title: 'TODO: Informal Cross Training active',\n    }),\n  },\n};\n","import { GameAction } from './types';\nimport { GameActionId, gameActionList } from './gameActions';\n\nconst gameActions: GameAction[] = Object.entries(\n  gameActionList,\n).map(([id, action]) => ({ ...action, id: id as GameActionId }));\n\nexport function findGameActionById(gameActionId: GameActionId): GameAction {\n  return gameActions.find((gameAction) => gameActionId === gameAction.id)!;\n}\n\nexport function getEffect(\n  gameActionId: GameActionId,\n  age: number,\n  finishedActionIds: GameActionId[],\n) {\n  return findGameActionById(gameActionId).effect(age, finishedActionIds);\n}\n\nexport function getAvailableGameActions(\n  currentRound: number,\n  finishedActionIds: GameActionId[],\n  selectedGameActionIds: GameActionId[],\n): GameAction[] {\n  return gameActions.filter((gameAction) =>\n    gameAction.available(\n      currentRound,\n      finishedActionIds,\n      selectedGameActionIds,\n      gameAction.id,\n    ),\n  );\n}\n","import { storySucceeds, sumByProp } from '../lib';\nimport { findGameActionById, GameActionId, getEffect } from './gameActions';\n\nexport type Round = {\n  selectedGameActionIds: GameActionId[];\n};\nexport type ClosedRound = Round & {\n  storiesCompleted: number;\n};\n\nexport function createRound(): Round {\n  return {\n    selectedGameActionIds: [],\n  };\n}\n\nexport function getEffects(\n  round: Round,\n  age: number,\n  finishedActionIds: GameActionId[],\n) {\n  return round.selectedGameActionIds.map((id) =>\n    getEffect(id, age, finishedActionIds),\n  );\n}\n\nexport function getCosts(round: Round) {\n  return sumByProp(round.selectedGameActionIds.map(findGameActionById), 'cost');\n}\n\nexport function closeRound(\n  round: Round,\n  storiesAttempted: number,\n): ClosedRound {\n  return {\n    ...round,\n    storiesCompleted:\n      storiesAttempted <= 0\n        ? 0\n        : Array(storiesAttempted).fill('').filter(storySucceeds).length,\n  };\n}\n","import { findGameActionById } from './gameActions';\nimport { Round } from './round';\n\nexport type Effect = {\n  capacity: number;\n  title: string;\n  description?: string;\n};\n\ntype GameEffect = (rounds: Round[]) => Effect | null;\n\nexport const gameEffectList: GameEffect[] = [\n  function technicalDebtDrag(rounds) {\n    let roundsWithoutEngAction = 0;\n\n    for (const round of rounds) {\n      const roundsGameActions = round.selectedGameActionIds.map(\n        findGameActionById,\n      );\n      const engineeringAction = roundsGameActions.find(\n        ({ type }) => type === 'ENGINEERING',\n      );\n\n      if (engineeringAction) {\n        break;\n      }\n\n      roundsWithoutEngAction += 1;\n    }\n\n    if (roundsWithoutEngAction === 0) {\n      return null;\n    }\n\n    return {\n      capacity: -roundsWithoutEngAction,\n      title: 'TODO: TechnicalDebt Drag Effect Title',\n      description: `No Engineering improvement for ${roundsWithoutEngAction} round${\n        roundsWithoutEngAction > 1 ? 's' : ''\n      }`,\n    };\n  },\n];\n","import {\n  Round,\n  ClosedRound,\n  createRound,\n  closeRound,\n  getEffects,\n  getCosts,\n} from './round';\nimport { Effect, gameEffectList } from './effects';\nimport { concatByProp } from '../lib';\nimport { BASE_CAPACITY } from '../constants';\nimport { GameActionId } from './gameActions';\n\nexport type GameState = {\n  currentRound: Round;\n  pastRounds: ClosedRound[];\n};\nexport type SelectGameActionAction = {\n  type: 'SELECT_GAME_ACTION';\n  payload: GameActionId;\n};\nexport type NextRoundAction = { type: 'NEXT_ROUND' };\nexport type Action = NextRoundAction | SelectGameActionAction;\n\nexport const INITIAL_STATE: GameState = {\n  currentRound: {\n    selectedGameActionIds: [],\n  },\n  pastRounds: [],\n};\n\nexport function getRoundEffects(pastRounds: Round[]) {\n  if (!pastRounds.length) {\n    return [];\n  }\n\n  const roundAmounts = pastRounds.length;\n  const allActionIds = concatByProp(pastRounds, 'selectedGameActionIds');\n  const actionEffects = pastRounds.reduce((allEffects, round, i) => {\n    const age = roundAmounts - (i + 1);\n    const roundEffects = getEffects(round, age, allActionIds);\n\n    return allEffects.concat(roundEffects);\n  }, [] as (Effect | null)[]);\n\n  const gameEffects = gameEffectList.map((gameEffect) => {\n    return gameEffect(pastRounds);\n  });\n\n  return actionEffects\n    .concat(gameEffects)\n    .filter(\n      (gameEffectOrNull): gameEffectOrNull is Effect =>\n        gameEffectOrNull !== null,\n    );\n}\n\nexport function getCapacity(effects: Effect[]) {\n  return effects.reduce((capacity, effect) => {\n    return capacity + effect.capacity;\n  }, BASE_CAPACITY);\n}\n\nexport function gameReducer(state: GameState, action: Action): GameState {\n  switch (action.type) {\n    case 'SELECT_GAME_ACTION': {\n      return {\n        ...state,\n        currentRound: {\n          ...state.currentRound,\n          selectedGameActionIds: [\n            ...state.currentRound.selectedGameActionIds,\n            action.payload,\n          ],\n        },\n      };\n    }\n    case 'NEXT_ROUND': {\n      return {\n        ...state,\n        pastRounds: [\n          ...state.pastRounds,\n          closeRound(\n            state.currentRound,\n            getCapacity(getRoundEffects(state.pastRounds)) -\n              getCosts(state.currentRound),\n          ),\n        ],\n        currentRound: createRound(),\n      };\n    }\n  }\n}\n","export const TOTAL_ROUNDS = 6;\nexport const BASE_CAPACITY = 10;\n","import { Dispatch, useReducer } from 'react';\nimport { concatByProp, sumByProp } from '../lib';\nimport { Effect } from './effects';\nimport {\n  Action,\n  gameReducer,\n  getRoundEffects,\n  getCapacity,\n  INITIAL_STATE,\n} from './game';\nimport { getAvailableGameActions, GameAction } from './gameActions';\n\nimport { getCosts } from './round';\n\nexport type AppState = {\n  availableGameActions: GameAction[];\n  currentRound: {\n    number: number;\n    capacity: {\n      available: number;\n      total: number;\n    };\n    activeEffects: Effect[];\n  };\n  result: {\n    storiesCompleted: number;\n  };\n  pastRounds: {\n    number: number;\n  }[];\n};\n\nexport default function useAppState(): [AppState, Dispatch<Action>] {\n  const [state, dispatch] = useReducer(gameReducer, INITIAL_STATE);\n  // const pastRound = state.pastRounds[state.pastRounds.length - 1];\n  const effects = getRoundEffects(state.pastRounds);\n  const roundCapacity = getCapacity(effects);\n  const costs = getCosts(state.currentRound);\n  const capacityAvailable = roundCapacity - costs;\n  const availableGameActions = getAvailableGameActions(\n    state.pastRounds.length + 1,\n    concatByProp(state.pastRounds, 'selectedGameActionIds'),\n    state.currentRound.selectedGameActionIds,\n  );\n\n  return [\n    {\n      availableGameActions,\n      currentRound: {\n        number: state.pastRounds.length + 1,\n        capacity: {\n          available: capacityAvailable,\n          total: roundCapacity,\n        },\n        activeEffects: effects,\n      },\n      result: {\n        storiesCompleted: sumByProp(state.pastRounds, 'storiesCompleted'),\n      },\n      pastRounds: state.pastRounds.map((round, i) => ({\n        number: i + 1,\n      })),\n    },\n    dispatch,\n  ];\n}\n","import React from 'react';\nimport { useAppState } from './state';\nimport { TOTAL_ROUNDS } from './constants';\n\nexport default function App() {\n  const [state, dispatch] = useAppState();\n\n  return (\n    <>\n      <h1>High-Performance Team Game </h1>\n      {state.currentRound.number > TOTAL_ROUNDS ? (\n        <>\n          <h2>Results</h2>\n          <p>Completed {state.result.storiesCompleted} user stories</p>\n        </>\n      ) : (\n        <>\n          {state.pastRounds.length !== 0 && (\n            <>\n              <h2>Round: {state.pastRounds.slice(-1)[0].number} results</h2>\n              {/* <p>Action Cost: {pastRound.costs}</p>\n              <p>\n                Stories Completed: {pastRound.storiesCompleted}/\n                {pastRound.storiesAttempted}\n              </p> */}\n            </>\n          )}\n          <h2>Round {state.currentRound.number} of 6</h2>\n          <p>\n            Capacity: {state.currentRound.capacity.available} /{' '}\n            {state.currentRound.capacity.total}\n          </p>\n          {state.currentRound.activeEffects.length !== 0 && (\n            <>\n              <h3>Active Effects</h3>\n              {state.currentRound.activeEffects.map((effect) => (\n                <>\n                  <h4>{effect.title}</h4>\n                  <p>Capacity: {effect.capacity}</p>\n                  {effect.description && <p>{effect.description}</p>}\n                </>\n              ))}\n            </>\n          )}\n          <button onClick={() => dispatch({ type: 'NEXT_ROUND' })}>\n            Complete Round\n          </button>\n\n          <h2>Available Actions</h2>\n          {state.availableGameActions.map((gameAction) => (\n            <div key={gameAction.id}>\n              <h3>{gameAction.name}</h3>\n              <p>{gameAction.description}</p>\n              <p>Cost: {gameAction.cost}</p>\n              <button\n                onClick={() =>\n                  dispatch({\n                    type: 'SELECT_GAME_ACTION',\n                    payload: gameAction.id,\n                  })\n                }\n              >\n                Commit\n              </button>\n            </div>\n          ))}\n        </>\n      )}\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.css';\nimport App from './App';\n\n/* Automatically re-trigger cypress tests on load */\nif (process.env.REACT_APP_ENV === 'test') {\n  const btn: HTMLButtonElement | null = window.top.document.querySelector(\n    '.reporter .restart',\n  );\n  if (btn) {\n    btn.click();\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}